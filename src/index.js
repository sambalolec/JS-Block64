//**************************************  Global Const  **************************************//

/* S-Boxen optimiert (Maximin nonlinearity) mit erweiterten Nachbarschaftsoperationen */
/* Generated: Thu Oct 23 07:40:27 2025, elapsed 55.00s, best_obj 106.0 */
const sbox1 = [
  0x97, 0xa5, 0x5a, 0x7c, 0x62, 0x60, 0xb3, 0x1e, 0x5c, 0x57, 0x71, 0xc9, 0x36,
  0x1a, 0xc4, 0x5e, 0xfa, 0xea, 0x08, 0x3e, 0xb7, 0x3a, 0x0a, 0xab, 0x54, 0xed,
  0xd2, 0x2d, 0x72, 0xa1, 0x73, 0x22, 0x74, 0x7b, 0x6b, 0x77, 0xc2, 0x84, 0xf9,
  0xc8, 0xbd, 0x8e, 0xd7, 0xa8, 0xe1, 0xcd, 0x5d, 0x12, 0xb9, 0x24, 0x27, 0x81,
  0x68, 0x58, 0xde, 0x1b, 0x7e, 0x10, 0x9f, 0x4d, 0x8f, 0x43, 0xf1, 0x2c, 0xcf,
  0xff, 0x75, 0xba, 0xbc, 0x8c, 0x20, 0x25, 0x64, 0x7f, 0x39, 0x85, 0xa3, 0x87,
  0xa7, 0xdb, 0xef, 0x47, 0x38, 0xda, 0x6c, 0x8d, 0x1c, 0x21, 0xaf, 0x31, 0x04,
  0xa9, 0xf0, 0x42, 0xe7, 0x0e, 0x80, 0x55, 0x56, 0x37, 0xc7, 0xdc, 0xb0, 0x51,
  0xee, 0x11, 0x40, 0x53, 0x76, 0xca, 0x9c, 0x7a, 0x93, 0xc6, 0x67, 0x4a, 0xbf,
  0xd1, 0x3d, 0xac, 0x0d, 0xb2, 0xae, 0x2f, 0x48, 0x26, 0x98, 0x78, 0x2b, 0x92,
  0x46, 0x16, 0x15, 0x13, 0xf3, 0xa2, 0xe5, 0x4c, 0xb8, 0xe0, 0x83, 0xf2, 0xd0,
  0x96, 0x4e, 0x59, 0x49, 0x30, 0xe6, 0x03, 0xb1, 0xfd, 0xc0, 0xe3, 0xf4, 0x3f,
  0x5f, 0x50, 0x35, 0xfe, 0x94, 0xf8, 0xc3, 0x0b, 0xf6, 0x1f, 0x45, 0xfb, 0x99,
  0x0f, 0x70, 0x65, 0x91, 0x52, 0xe2, 0x4b, 0x00, 0x8a, 0x89, 0x1d, 0x6f, 0xfc,
  0xbb, 0xdf, 0xd3, 0x33, 0x95, 0xb4, 0xe9, 0xe4, 0xb5, 0x06, 0xad, 0xd4, 0xf7,
  0x23, 0xbe, 0x01, 0xd5, 0xeb, 0xf5, 0x07, 0xa4, 0xd8, 0xd9, 0xa6, 0x9a, 0x09,
  0x44, 0x9e, 0x2a, 0x6a, 0x41, 0x90, 0x6e, 0xcb, 0x5b, 0x17, 0x8b, 0x32, 0x88,
  0x02, 0x05, 0x2e, 0xc5, 0x79, 0x61, 0x29, 0x69, 0x28, 0xa0, 0xc1, 0x86, 0xdd,
  0x4f, 0x3b, 0x66, 0x82, 0x9b, 0x63, 0xd6, 0xce, 0xe8, 0xec, 0x14, 0x3c, 0x18,
  0x7d, 0x6d, 0x9d, 0x34, 0xcc, 0x0c, 0xb6, 0xaa, 0x19,
];
Object.freeze(sbox1);

const sbox2 = [
  0xe9, 0xf0, 0xb4, 0x62, 0x35, 0xbc, 0x70, 0xaf, 0xe4, 0x83, 0x56, 0x3a, 0x40,
  0xec, 0xbb, 0xf2, 0x96, 0x32, 0xab, 0xa2, 0x6c, 0x5c, 0xff, 0x67, 0xe5, 0xa0,
  0x81, 0xee, 0x28, 0x72, 0x3d, 0x77, 0xa7, 0xe7, 0x9b, 0xde, 0x7a, 0x59, 0x4d,
  0x51, 0x1e, 0xc3, 0x63, 0x41, 0x06, 0x52, 0xbf, 0x7b, 0x6a, 0x09, 0x9a, 0x48,
  0xb9, 0xb6, 0xbd, 0x6f, 0xa6, 0x5f, 0x26, 0x66, 0xfd, 0xdf, 0x85, 0xce, 0x78,
  0x16, 0x3e, 0x1f, 0x53, 0xda, 0x8d, 0xd8, 0x9c, 0x15, 0x82, 0x7f, 0xed, 0x73,
  0x79, 0x2e, 0x92, 0xae, 0x6d, 0x3b, 0x1a, 0xb1, 0x2f, 0xb7, 0x7e, 0xf4, 0x0b,
  0x7d, 0xc6, 0x8c, 0x44, 0x69, 0xfc, 0xf3, 0xca, 0xa4, 0x6b, 0x68, 0x1d, 0xa5,
  0xa3, 0x0c, 0x07, 0xe1, 0x90, 0x9f, 0x61, 0x88, 0x5a, 0xad, 0x5d, 0xc1, 0x29,
  0xbe, 0x4c, 0x49, 0xb5, 0x11, 0xcb, 0xe3, 0xdd, 0xba, 0x0f, 0x03, 0xb8, 0x0d,
  0x8f, 0x21, 0xd3, 0xfb, 0xd4, 0x25, 0x42, 0x34, 0x37, 0x1c, 0xd9, 0x4f, 0xa8,
  0x31, 0xf9, 0x60, 0xf6, 0x5b, 0x55, 0xc0, 0xe6, 0x2c, 0xb3, 0xb0, 0x57, 0x80,
  0x71, 0xcf, 0x89, 0xd5, 0x38, 0x04, 0xfe, 0x30, 0x93, 0xc2, 0x2b, 0x43, 0xd2,
  0x84, 0xf7, 0x17, 0x86, 0x23, 0x99, 0xc5, 0xc7, 0x05, 0xdc, 0x2a, 0x97, 0x50,
  0x8e, 0xf8, 0xcc, 0xe8, 0x3c, 0xc9, 0x74, 0xd1, 0x58, 0xea, 0x13, 0xe2, 0xa9,
  0x45, 0x24, 0x8a, 0x0e, 0x33, 0x4e, 0x64, 0x10, 0x3f, 0x12, 0x2d, 0xeb, 0xe0,
  0x9e, 0x6e, 0xcd, 0x1b, 0xef, 0xac, 0x8b, 0x01, 0x54, 0xf5, 0x18, 0x94, 0x4b,
  0xc4, 0x7c, 0x39, 0x19, 0x91, 0x5e, 0xfa, 0xd6, 0x14, 0x65, 0x9d, 0x08, 0x0a,
  0x98, 0xd0, 0x87, 0x36, 0xf1, 0x95, 0xc8, 0x20, 0xd7, 0xa1, 0x47, 0xb2, 0x22,
  0x00, 0x46, 0xaa, 0x02, 0x75, 0xdb, 0x4a, 0x27, 0x76,
];
Object.freeze(sbox2);

const sbox3 = [
  0x54, 0x99, 0x33, 0x57, 0x5f, 0x37, 0xce, 0xc5, 0x87, 0x0e, 0x27, 0xf3, 0x0b,
  0xb7, 0x5d, 0x49, 0xc1, 0x9b, 0x7f, 0x0d, 0x19, 0x8e, 0x61, 0xc4, 0x89, 0x95,
  0x66, 0x60, 0xbd, 0x8c, 0xd5, 0x94, 0x7b, 0x40, 0x58, 0xe8, 0xb6, 0x2b, 0xde,
  0xf2, 0x74, 0xb2, 0xc9, 0x26, 0x88, 0xea, 0xda, 0xac, 0xf6, 0x9a, 0xcf, 0xf0,
  0x5b, 0xad, 0x78, 0xb4, 0x63, 0x23, 0xd0, 0x0a, 0x43, 0x85, 0x98, 0x75, 0x53,
  0x8b, 0x20, 0xe6, 0x82, 0x17, 0x77, 0x3b, 0xf7, 0xa7, 0xf4, 0xb8, 0xd4, 0x34,
  0xcb, 0xb0, 0x4a, 0x30, 0x9f, 0xed, 0xe3, 0xc3, 0xfd, 0xd1, 0x01, 0x45, 0x3e,
  0x6a, 0x1b, 0xe1, 0x36, 0xc0, 0x6f, 0x3c, 0xa5, 0x1a, 0xf1, 0xb5, 0x83, 0x22,
  0x9c, 0x76, 0xa9, 0xdd, 0xaa, 0xa6, 0xff, 0xd7, 0xf5, 0x48, 0x8f, 0x86, 0xd2,
  0x0f, 0xeb, 0xbb, 0x2a, 0xe4, 0x08, 0xbc, 0x73, 0x1f, 0x65, 0x0c, 0x7e, 0xf9,
  0xa4, 0xcd, 0xa8, 0x4d, 0x18, 0x16, 0xb3, 0xe7, 0x09, 0x25, 0x52, 0x38, 0x5e,
  0xe5, 0xbe, 0xcc, 0x3d, 0xdc, 0xba, 0xfc, 0x69, 0x6b, 0x14, 0x8a, 0x04, 0x46,
  0xca, 0xa3, 0xec, 0x28, 0xaf, 0xbf, 0x84, 0x6e, 0x44, 0x6d, 0x91, 0xa0, 0x55,
  0xf8, 0x1d, 0x81, 0x70, 0xc7, 0x41, 0xb1, 0x35, 0xe9, 0xef, 0x64, 0x71, 0x06,
  0x6c, 0xae, 0x62, 0x4b, 0x59, 0x5a, 0x3f, 0x7a, 0x67, 0x29, 0x68, 0x11, 0x00,
  0xdf, 0xe2, 0xfe, 0xab, 0x2d, 0xdb, 0x51, 0x2f, 0x02, 0x4f, 0xfa, 0x42, 0x93,
  0xb9, 0xa2, 0x7c, 0x96, 0x39, 0xfb, 0x79, 0x2e, 0x31, 0xc2, 0x24, 0x2c, 0x7d,
  0x9e, 0xd3, 0xc8, 0x32, 0xd6, 0x15, 0x90, 0x80, 0xee, 0x97, 0x12, 0x13, 0x47,
  0x72, 0x9d, 0x21, 0x05, 0x07, 0x50, 0x10, 0x92, 0x5c, 0x1c, 0x3a, 0xd9, 0x4e,
  0xd8, 0xa1, 0xc6, 0x4c, 0x03, 0x56, 0x8d, 0x1e, 0xe0,
];
Object.freeze(sbox3);

const sbox4 = [
  0x2e, 0xaa, 0x0d, 0xc8, 0x8b, 0xd2, 0x45, 0xf6, 0x41, 0xf2, 0x8d, 0x0c, 0xb9,
  0xc3, 0x62, 0x9b, 0x2c, 0x8c, 0xd9, 0xd1, 0x47, 0xc0, 0xd8, 0x1a, 0xbf, 0x5c,
  0x0f, 0x92, 0xce, 0xdb, 0x98, 0x58, 0x48, 0x9e, 0xf1, 0x2d, 0x1d, 0xe7, 0x17,
  0xe5, 0xa3, 0x59, 0x90, 0xff, 0x5d, 0xbc, 0x85, 0xde, 0x65, 0xeb, 0x28, 0x57,
  0xd5, 0xc1, 0x2b, 0x71, 0x50, 0xc2, 0xa1, 0xfa, 0x64, 0xa2, 0x6c, 0xb6, 0x99,
  0xcc, 0x13, 0x6d, 0x27, 0xfd, 0xca, 0xe2, 0xa9, 0xba, 0x5f, 0x40, 0x4b, 0xe0,
  0x1c, 0x55, 0x19, 0xdd, 0xd4, 0x94, 0x01, 0x3f, 0xd0, 0x84, 0xc4, 0x0e, 0xfb,
  0x24, 0xed, 0x6f, 0xa8, 0x9d, 0x36, 0x88, 0xbe, 0x83, 0xad, 0x51, 0xef, 0x96,
  0x77, 0xdf, 0x9a, 0x66, 0x03, 0xf0, 0x56, 0x3d, 0x09, 0x1b, 0x20, 0xec, 0x26,
  0x00, 0x86, 0x95, 0x76, 0x4f, 0x34, 0x02, 0xee, 0x70, 0xb3, 0xb1, 0x35, 0x54,
  0xdc, 0xb8, 0x61, 0x74, 0xa5, 0x43, 0x29, 0xf9, 0x5e, 0x32, 0x37, 0x80, 0x3b,
  0x2a, 0xe4, 0x82, 0x8f, 0xab, 0xc9, 0xbb, 0x3e, 0xe6, 0x7d, 0x44, 0x91, 0xea,
  0x12, 0x6a, 0x53, 0x52, 0x5b, 0x6e, 0x4d, 0xd6, 0x3c, 0x08, 0xfe, 0x1f, 0x21,
  0xd3, 0x06, 0x38, 0x67, 0x79, 0x7c, 0x3a, 0x1e, 0xf4, 0xa4, 0xf8, 0x42, 0xa0,
  0xd7, 0x11, 0x75, 0xc6, 0x72, 0x07, 0x0a, 0x23, 0x0b, 0xc5, 0x46, 0xbd, 0x7a,
  0xe8, 0x69, 0x4c, 0x10, 0xfc, 0xac, 0xae, 0xe9, 0xe1, 0xb4, 0x63, 0x39, 0x7b,
  0x7f, 0xc7, 0x16, 0x25, 0x5a, 0x05, 0x9c, 0xb0, 0xa6, 0x7e, 0x4e, 0xe3, 0x14,
  0xa7, 0x8a, 0xf5, 0xda, 0x2f, 0xcb, 0xcf, 0xb5, 0xb7, 0x78, 0x6b, 0xf7, 0x30,
  0x04, 0x68, 0x18, 0x9f, 0x4a, 0x8e, 0xaf, 0x15, 0x33, 0x97, 0x93, 0x60, 0x81,
  0x87, 0x73, 0x49, 0x89, 0xb2, 0x22, 0x31, 0xf3, 0xcd,
];
Object.freeze(sbox4);

const sboxes = [sbox1, sbox2, sbox3, sbox4];
Object.freeze(sboxes);

//**************************************  Utility Functions  **************************************//

// ROL und ROR, in JS schmerzlich vermisst
function rol32(value, shift) {
  return ((value << shift) | (value >>> (32 - shift))) >>> 0;
}
function ror32(value, shift) {
  return ((value >>> shift) | (value << (32 - shift))) >>> 0;
}

// Generiert 64-Bit Zufallszahlen; Für Kryptoanalyse 0n zurück geben! Sonst Ergebnis totaler Blödsinn.
function random64() {
  const arr = new Uint32Array(2);
  crypto.getRandomValues(arr);
  let rand = 0n;
  for (const word of arr) {
    rand = (rand << 32n) + BigInt(word);
  }
  return rand;
}

// Berechnet eine 2-Bit Prüfsumme; Für Kryptonalyse 0 zurück geben! Sonst Ergebnis nicht korrekt.
function knuthHash(n) {
  const x = n >>> 0;
  return (Math.imul(x, 0x9e3779b1) >>> 30) & 3; // nur die höchsten 2 Bit als Hash
}

//**************************************  Converter Functions  **************************************//

function objectTo64BitBlocks(obj) {
  // Objekt in Bytes umwandeln (JSON + UTF-8)
  const encoder = new TextEncoder();
  const bytes = encoder.encode(JSON.stringify(obj));

  // Uint8Array in 64-Bit Blöcke aufteilen, padden und in BigInt umwandeln
  const blockCount = (bytes.length + 7) >> 3; // schnelles aufrunden auf nächstes Vielfaches von 8 (Assemblertrick)
  const blocks = new Array(blockCount);
  for (let i = 0; i < blockCount; i++) {
    let block = 0n;
    // 8 Bytes pro Block
    for (let j = 0; j < 8; j++) {
      const byte = bytes[i * 8 + j] ?? 0; // Padding mit 0, falls Block unvollständig
      block |= BigInt(byte) << BigInt(8 * j); // Bytes in BigInt verschieben
    }
    blocks[i] = block;
  }
  return blocks;
}

function blocks64BitToObj(blocks) {
  const bytes = [];

  // 64-Bit Blöcke zurück in Bytes umwandeln
  for (const block of blocks) {
    // 8 Bytes pro Block (Little-Endian)
    for (let j = 0; j < 8; j++) {
      const byte = Number((block >> BigInt(8 * j)) & 0xffn);
      bytes.push(byte);
    }
  }

  // Eventuelle Padding-Nullbytes entfernen
  while (bytes.length && bytes[bytes.length - 1] === 0) {
    bytes.pop();
  }

  // Bytes zurück zu String
  const decoder = new TextDecoder(); // UTF-8
  return JSON.parse(decoder.decode(new Uint8Array(bytes)));
}

//**************************************  Core Functions  **************************************//

// Irrationale Zahlen *2^64 für bunte Mischung
const knuthConst = 0x9e3779b97f4a7c15n;
const sqrt2 = 0x6a09e667f3bcc909n;
const sqrt3 = 0xbb67ae8584caa73bn;
const sqrt5 = 0x8b988befb3b3a0a3n;
const pi = 0x3243f6a8885a308dn;
const logNat = 0x45f306dc9c883afen;
const ln2 = 0xb17217f7d1cf79abn;

// Konstanten um weniger zu tippen und um Fehler zu vermeiden
const mask64 = 0xffffffffffffffffn;
const mask32 = 0xffffffffn;

// Das Key-Objekt
const key = {
  work: 0n, // Arbeitsschlüssel, wird für jeden einzelnen Block upgedatet
  upKey: 0n, // Schlüssel für Aufwärtsverschlüsselung
  downKey: 0n, // Schlüssel für Abwärtsverschlüsselung

  // aus dem Passwort zwei 64 Bit Schlüssel erzeugen,
  // ... die mathematisch praktisch nix miteinander zu tun haben
  init(passphrase) {
    let passUp = objectTo64BitBlocks(passphrase);
    let passDown = passUp;
    let feedback = pi;
    // Schlüssel verschlüsseln
    const createKey = (blocks) => {
      blocks.forEach((block, i) => {
        blocks[i] = feistel(block * feedback) & mask64;
        feedback = blocks[i];
      });
      return blocks;
    };
    // Up- und Downkey möglichst schrullig berechnen
    passUp.push(logNat, ln2);
    this.work = sqrt2;
    createKey(createKey(passUp));

    feedback = (feedback + sqrt3) & mask64;
    passDown.push(ln2, logNat);
    this.work = passUp[passUp.length - 1];
    createKey(createKey(passDown));
    this.downKey = passDown[passDown.length - 1];
    this.update();
    this.upKey = this.work;
  },
  // Für jeden neuen Block frischen Key aus altem generieren mit XorShift64*
  // Bessere Performance mit "+" statt "*", aber mathematisch weniger komplex
  update() {
    this.work ^= this.work >> 12n;
    this.work ^= (this.work << 25n) & mask64;
    this.work ^= this.work >> 27n;
    this.work = (this.work * knuthConst) & mask64;
  },
};

function S_Box(uint32) {
  // 32 Bit Input in 4 Blöcke zu je 8 Bit zerlegen
  const bytes = [
    uint32 & 0xff,
    (uint32 >>> 8) & 0xff,
    (uint32 >>> 16) & 0xff,
    (uint32 >>> 24) & 0xff,
  ];

  // Substitution: Mit dem Hash das Alphabet festlegen und anwenden
  const shuffle = knuthHash(uint32);
  const [v0, v1, v2, v3] = bytes.map(
    (byte, i) => sboxes[i ^ shuffle][byte] & 0xff
  );

  // Die 8-Bit Blöcke wieder zu einer 32-Bit Zahl kombinieren und mixen
  const tmp = (v0 | (v1 << 8) | (v2 << 16) | (v3 << 24)) >>> 0;
  const merged = (tmp + rol32(tmp, 10) + ror32(tmp, 11)) >>> 0;
  return merged;
}

function feistel(block) {
  const rounds = 5;

  // Frischen Blockkey erstellen und Input damit verXodern
  key.update();
  let data = block ^ key.work;
  // 64-Bit BigInt in linke und rechte Hälfte zerlegen
  let left = Number(data & mask32) >>> 0;
  let right = Number((data >> 32n) & mask32) >>> 0;

  // Durchnudeln
  for (let r = 0; r < rounds; r++) {
    const newLeft = right;
    const newRight = left ^ S_Box(right);
    left = newLeft;
    right = newRight;
  }

  // Die beiden Hälften rekombinieren
  let out = BigInt(right) & mask32;
  out |= (BigInt(left) & mask32) << 32n;

  // Erneut mit Blockkey verXodern und zurück geben
  return out ^ key.work;
}

//**************************************  High-Level Functions  **************************************//

function encrypt(data, passphrase) {
  // Keys aus Passwort erzeugen
  key.init(passphrase);

  // Input in Binary umwandeln und in Random-Blocks kapseln
  const blocks = objectTo64BitBlocks(data);
  let IV = random64() & mask64;
  blocks.unshift(IV);
  IV = random64() & mask64;
  blocks.push(IV);

  // Aufwärts verschlüsseln mit CBC
  key.work = key.upKey;
  let feedback = sqrt5;
  for (let i = 0; i < blocks.length; i++) {
    blocks[i] ^= feedback;
    blocks[i] = feistel(blocks[i]);
    feedback = blocks[i];
  }

  // Rückwärts verschlüsseln mit CBC
  key.work = key.downKey;
  feedback = sqrt5;
  for (let i = blocks.length - 1; i >= 0; i--) {
    blocks[i] ^= feedback;
    blocks[i] = feistel(blocks[i]);
    feedback = blocks[i];
  }

  return blocks;
}

function decrypt(blocks, passphrase) {
  // Keys aus Passwort erzeugen
  key.init(passphrase);

  // Rückwärts entschlüsseln mit CBC
  let delayed = 0n;
  key.work = key.downKey;
  let feedback = sqrt5;
  for (let i = blocks.length - 1; i >= 0; i--) {
    delayed = blocks[i];
    blocks[i] = feistel(blocks[i]);
    blocks[i] ^= feedback;
    feedback = delayed;
  }

  // Vorwärts entschlüsseln mit CBC
  key.work = key.upKey;
  feedback = sqrt5;
  for (let i = 0; i < blocks.length; i++) {
    delayed = blocks[i];
    blocks[i] = feistel(blocks[i]);
    blocks[i] ^= feedback;
    feedback = delayed;
  }

  // Random-Blocks wieder entfernen
  blocks.shift();
  blocks.pop();
  // Binary zurückkonvertieren und ausgeben
  return blocks64BitToObj(blocks);
}

//**************************************  UI and Interaction  **************************************//

const output = document.getElementById("output");

// Hilfsfunktion um Console und Output zu bedienen
function log(...args) {
  console.log(...args);
  output.textContent += args.join(" ") + "\n";
}

userInput = {};

// Event listener für "Run" button
document.getElementById("runBtn").addEventListener("click", () => {
  output.textContent = ""; // Vor jedem Lauf resetten, sonst Layout kaputt.

  // Eingaben einlesen
  userInput.value = document.getElementById("plaintext").value;
  log("Original:", userInput.value);
  const plainkey = document.getElementById("plainkey").value;
  log("Passwort:", plainkey);

  // --- Hauptprogramm ---

  // Objekt "userInput" verschlüsseln -> "chiffrat"
  const chiffrat = encrypt(userInput, plainkey);

  // Format: Ausgabe in Hex mit führenden Nullen; Accent grave ausprobiert.
  log(
    `Encrypted Blocks ${chiffrat.length}:`,
    chiffrat.map((x) => "0x" + x.toString(16).padStart(16, "0"))
  );

  // "chiffrat" wieder entschlüsseln -> "result"
  const result = decrypt(chiffrat, plainkey);
  log("Decrypted:", result.value);
});

//**************************************  To Do List  **************************************//

/* 
Ausgabe in Hex, mehr kommentiert, kleiner Bug gefixt 
  
Fehlt noch:
- Datenkompression; JSON.stringify bläst die Datenstruktur ungemein auf
*/
