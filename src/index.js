/* S-Boxen optimiert (Maximin nonlinearity) mit erweiterten Nachbarschaftsoperationen */
/* Generated: Thu Oct 23 07:40:27 2025, elapsed 55.00s, best_obj 106.0 */
const sbox1 = [
  0b10010111, 0b10100101, 0b01011010, 0b01111100, 0b01100010, 0b01100000,
  0b10110011, 0b00011110, 0b01011100, 0b01010111, 0b01110001, 0b11001001,
  0b00110110, 0b00011010, 0b11000100, 0b01011110, 0b11111010, 0b11101010,
  0b00001000, 0b00111110, 0b10110111, 0b00111010, 0b00001010, 0b10101011,
  0b01010100, 0b11101101, 0b11010010, 0b00101101, 0b01110010, 0b10100001,
  0b01110011, 0b00100010, 0b01110100, 0b01111011, 0b01101011, 0b01110111,
  0b11000010, 0b10000100, 0b11111001, 0b11001000, 0b10111101, 0b10001110,
  0b11010111, 0b10101000, 0b11100001, 0b11001101, 0b01011101, 0b00010010,
  0b10111001, 0b00100100, 0b00100111, 0b10000001, 0b01101000, 0b01011000,
  0b11011110, 0b00011011, 0b01111110, 0b00010000, 0b10011111, 0b01001101,
  0b10001111, 0b01000011, 0b11110001, 0b00101100, 0b11001111, 0b11111111,
  0b01110101, 0b10111010, 0b10111100, 0b10001100, 0b00100000, 0b00100101,
  0b01100100, 0b01111111, 0b00111001, 0b10000101, 0b10100011, 0b10000111,
  0b10100111, 0b11011011, 0b11101111, 0b01000111, 0b00111000, 0b11011010,
  0b01101100, 0b10001101, 0b00011100, 0b00100001, 0b10101111, 0b00110001,
  0b00000100, 0b10101001, 0b11110000, 0b01000010, 0b11100111, 0b00001110,
  0b10000000, 0b01010101, 0b01010110, 0b00110111, 0b11000111, 0b11011100,
  0b10110000, 0b01010001, 0b11101110, 0b00010001, 0b01000000, 0b01010011,
  0b01110110, 0b11001010, 0b10011100, 0b01111010, 0b10010011, 0b11000110,
  0b01100111, 0b01001010, 0b10111111, 0b11010001, 0b00111101, 0b10101100,
  0b00001101, 0b10110010, 0b10101110, 0b00101111, 0b01001000, 0b00100110,
  0b10011000, 0b01111000, 0b00101011, 0b10010010, 0b01000110, 0b00010110,
  0b00010101, 0b00010011, 0b11110011, 0b10100010, 0b11100101, 0b01001100,
  0b10111000, 0b11100000, 0b10000011, 0b11110010, 0b11010000, 0b10010110,
  0b01001110, 0b01011001, 0b01001001, 0b00110000, 0b11100110, 0b00000011,
  0b10110001, 0b11111101, 0b11000000, 0b11100011, 0b11110100, 0b00111111,
  0b01011111, 0b01010000, 0b00110101, 0b11111110, 0b10010100, 0b11111000,
  0b11000011, 0b00001011, 0b11110110, 0b00011111, 0b01000101, 0b11111011,
  0b10011001, 0b00001111, 0b01110000, 0b01100101, 0b10010001, 0b01010010,
  0b11100010, 0b01001011, 0b00000000, 0b10001010, 0b10001001, 0b00011101,
  0b01101111, 0b11111100, 0b10111011, 0b11011111, 0b11010011, 0b00110011,
  0b10010101, 0b10110100, 0b11101001, 0b11100100, 0b10110101, 0b00000110,
  0b10101101, 0b11010100, 0b11110111, 0b00100011, 0b10111110, 0b00000001,
  0b11010101, 0b11101011, 0b11110101, 0b00000111, 0b10100100, 0b11011000,
  0b11011001, 0b10100110, 0b10011010, 0b00001001, 0b01000100, 0b10011110,
  0b00101010, 0b01101010, 0b01000001, 0b10010000, 0b01101110, 0b11001011,
  0b01011011, 0b00010111, 0b10001011, 0b00110010, 0b10001000, 0b00000010,
  0b00000101, 0b00101110, 0b11000101, 0b01111001, 0b01100001, 0b00101001,
  0b01101001, 0b00101000, 0b10100000, 0b11000001, 0b10000110, 0b11011101,
  0b01001111, 0b00111011, 0b01100110, 0b10000010, 0b10011011, 0b01100011,
  0b11010110, 0b11001110, 0b11101000, 0b11101100, 0b00010100, 0b00111100,
  0b00011000, 0b01111101, 0b01101101, 0b10011101, 0b00110100, 0b11001100,
  0b00001100, 0b10110110, 0b10101010, 0b00011001,
];
Object.freeze(sbox1);

const sbox2 = [
  0b11101001, 0b11110000, 0b10110100, 0b01100010, 0b00110101, 0b10111100,
  0b01110000, 0b10101111, 0b11100100, 0b10000011, 0b01010110, 0b00111010,
  0b01000000, 0b11101100, 0b10111011, 0b11110010, 0b10010110, 0b00110010,
  0b10101011, 0b10100010, 0b01101100, 0b01011100, 0b11111111, 0b01100111,
  0b11100101, 0b10100000, 0b10000001, 0b11101110, 0b00101000, 0b01110010,
  0b00111101, 0b01110111, 0b10100111, 0b11100111, 0b10011011, 0b11011110,
  0b01111010, 0b01011001, 0b01001101, 0b01010001, 0b00011110, 0b11000011,
  0b01100011, 0b01000001, 0b00000110, 0b01010010, 0b10111111, 0b01111011,
  0b01101010, 0b00001001, 0b10011010, 0b01001000, 0b10111001, 0b10110110,
  0b10111101, 0b01101111, 0b10100110, 0b01011111, 0b00100110, 0b01100110,
  0b11111101, 0b11011111, 0b10000101, 0b11001110, 0b01111000, 0b00010110,
  0b00111110, 0b00011111, 0b01010011, 0b11011010, 0b10001101, 0b11011000,
  0b10011100, 0b00010101, 0b10000010, 0b01111111, 0b11101101, 0b01110011,
  0b01111001, 0b00101110, 0b10010010, 0b10101110, 0b01101101, 0b00111011,
  0b00011010, 0b10110001, 0b00101111, 0b10110111, 0b01111110, 0b11110100,
  0b00001011, 0b01111101, 0b11000110, 0b10001100, 0b01000100, 0b01101001,
  0b11111100, 0b11110011, 0b11001010, 0b10100100, 0b01101011, 0b01101000,
  0b00011101, 0b10100101, 0b10100011, 0b00001100, 0b00000111, 0b11100001,
  0b10010000, 0b10011111, 0b01100001, 0b10001000, 0b01011010, 0b10101101,
  0b01011101, 0b11000001, 0b00101001, 0b10111110, 0b01001100, 0b01001001,
  0b10110101, 0b00010001, 0b11001011, 0b11100011, 0b11011101, 0b10111010,
  0b00001111, 0b00000011, 0b10111000, 0b00001101, 0b10001111, 0b00100001,
  0b11010011, 0b11111011, 0b11010100, 0b00100101, 0b01000010, 0b00110100,
  0b00110111, 0b00011100, 0b11011001, 0b01001111, 0b10101000, 0b00110001,
  0b11111001, 0b01100000, 0b11110110, 0b01011011, 0b01010101, 0b11000000,
  0b11100110, 0b00101100, 0b10110011, 0b10110000, 0b01010111, 0b10000000,
  0b01110001, 0b11001111, 0b10001001, 0b11010101, 0b00111000, 0b00000100,
  0b11111110, 0b00110000, 0b10010011, 0b11000010, 0b00101011, 0b01000011,
  0b11010010, 0b10000100, 0b11110111, 0b00010111, 0b10000110, 0b00100011,
  0b10011001, 0b11000101, 0b11000111, 0b00000101, 0b11011100, 0b00101010,
  0b10010111, 0b01010000, 0b10001110, 0b11111000, 0b11001100, 0b11101000,
  0b00111100, 0b11001001, 0b01110100, 0b11010001, 0b01011000, 0b11101010,
  0b00010011, 0b11100010, 0b10101001, 0b01000101, 0b00100100, 0b10001010,
  0b00001110, 0b00110011, 0b01001110, 0b01100100, 0b00010000, 0b00111111,
  0b00010010, 0b00101101, 0b11101011, 0b11100000, 0b10011110, 0b01101110,
  0b11001101, 0b00011011, 0b11101111, 0b10101100, 0b10001011, 0b00000001,
  0b01010100, 0b11110101, 0b00011000, 0b10010100, 0b01001011, 0b11000100,
  0b01111100, 0b00111001, 0b00011001, 0b10010001, 0b01011110, 0b11111010,
  0b11010110, 0b00010100, 0b01100101, 0b10011101, 0b00001000, 0b00001010,
  0b10011000, 0b11010000, 0b10000111, 0b00110110, 0b11110001, 0b10010101,
  0b11001000, 0b00100000, 0b11010111, 0b10100001, 0b01000111, 0b10110010,
  0b00100010, 0b00000000, 0b01000110, 0b10101010, 0b00000010, 0b01110101,
  0b11011011, 0b01001010, 0b00100111, 0b01110110,
];
Object.freeze(sbox2);

const sbox3 = [
  0b01010100, 0b10011001, 0b00110011, 0b01010111, 0b01011111, 0b00110111,
  0b11001110, 0b11000101, 0b10000111, 0b00001110, 0b00100111, 0b11110011,
  0b00001011, 0b10110111, 0b01011101, 0b01001001, 0b11000001, 0b10011011,
  0b01111111, 0b00001101, 0b00011001, 0b10001110, 0b01100001, 0b11000100,
  0b10001001, 0b10010101, 0b01100110, 0b01100000, 0b10111101, 0b10001100,
  0b11010101, 0b10010100, 0b01111011, 0b01000000, 0b01011000, 0b11101000,
  0b10110110, 0b00101011, 0b11011110, 0b11110010, 0b01110100, 0b10110010,
  0b11001001, 0b00100110, 0b10001000, 0b11101010, 0b11011010, 0b10101100,
  0b11110110, 0b10011010, 0b11001111, 0b11110000, 0b01011011, 0b10101101,
  0b01111000, 0b10110100, 0b01100011, 0b00100011, 0b11010000, 0b00001010,
  0b01000011, 0b10000101, 0b10011000, 0b01110101, 0b01010011, 0b10001011,
  0b00100000, 0b11100110, 0b10000010, 0b00010111, 0b01110111, 0b00111011,
  0b11110111, 0b10100111, 0b11110100, 0b10111000, 0b11010100, 0b00110100,
  0b11001011, 0b10110000, 0b01001010, 0b00110000, 0b10011111, 0b11101101,
  0b11100011, 0b11000011, 0b11111101, 0b11010001, 0b00000001, 0b01000101,
  0b00111110, 0b01101010, 0b00011011, 0b11100001, 0b00110110, 0b11000000,
  0b01101111, 0b00111100, 0b10100101, 0b00011010, 0b11110001, 0b10110101,
  0b10000011, 0b00100010, 0b10011100, 0b01110110, 0b10101001, 0b11011101,
  0b10101010, 0b10100110, 0b11111111, 0b11010111, 0b11110101, 0b01001000,
  0b10001111, 0b10000110, 0b11010010, 0b00001111, 0b11101011, 0b10111011,
  0b00101010, 0b11100100, 0b00001000, 0b10111100, 0b01110011, 0b00011111,
  0b01100101, 0b00001100, 0b01111110, 0b11111001, 0b10100100, 0b11001101,
  0b10101000, 0b01001101, 0b00011000, 0b00010110, 0b10110011, 0b11100111,
  0b00001001, 0b00100101, 0b01010010, 0b00111000, 0b01011110, 0b11100101,
  0b10111110, 0b11001100, 0b00111101, 0b11011100, 0b10111010, 0b11111100,
  0b01101001, 0b01101011, 0b00010100, 0b10001010, 0b00000100, 0b01000110,
  0b11001010, 0b10100011, 0b11101100, 0b00101000, 0b10101111, 0b10111111,
  0b10000100, 0b01101110, 0b01000100, 0b01101101, 0b10010001, 0b10100000,
  0b01010101, 0b11111000, 0b00011101, 0b10000001, 0b01110000, 0b11000111,
  0b01000001, 0b10110001, 0b00110101, 0b11101001, 0b11101111, 0b01100100,
  0b01110001, 0b00000110, 0b01101100, 0b10101110, 0b01100010, 0b01001011,
  0b01011001, 0b01011010, 0b00111111, 0b01111010, 0b01100111, 0b00101001,
  0b01101000, 0b00010001, 0b00000000, 0b11011111, 0b11100010, 0b11111110,
  0b10101011, 0b00101101, 0b11011011, 0b01010001, 0b00101111, 0b00000010,
  0b01001111, 0b11111010, 0b01000010, 0b10010011, 0b10111001, 0b10100010,
  0b01111100, 0b10010110, 0b00111001, 0b11111011, 0b01111001, 0b00101110,
  0b00110001, 0b11000010, 0b00100100, 0b00101100, 0b01111101, 0b10011110,
  0b11010011, 0b11001000, 0b00110010, 0b11010110, 0b00010101, 0b10010000,
  0b10000000, 0b11101110, 0b10010111, 0b00010010, 0b00010011, 0b01000111,
  0b01110010, 0b10011101, 0b00100001, 0b00000101, 0b00000111, 0b01010000,
  0b00010000, 0b10010010, 0b01011100, 0b00011100, 0b00111010, 0b11011001,
  0b01001110, 0b11011000, 0b10100001, 0b11000110, 0b01001100, 0b00000011,
  0b01010110, 0b10001101, 0b00011110, 0b11100000,
];
Object.freeze(sbox3);

const sbox4 = [
  0b00101110, 0b10101010, 0b00001101, 0b11001000, 0b10001011, 0b11010010,
  0b01000101, 0b11110110, 0b01000001, 0b11110010, 0b10001101, 0b00001100,
  0b10111001, 0b11000011, 0b01100010, 0b10011011, 0b00101100, 0b10001100,
  0b11011001, 0b11010001, 0b01000111, 0b11000000, 0b11011000, 0b00011010,
  0b10111111, 0b01011100, 0b00001111, 0b10010010, 0b11001110, 0b11011011,
  0b10011000, 0b01011000, 0b01001000, 0b10011110, 0b11110001, 0b00101101,
  0b00011101, 0b11100111, 0b00010111, 0b11100101, 0b10100011, 0b01011001,
  0b10010000, 0b11111111, 0b01011101, 0b10111100, 0b10000101, 0b11011110,
  0b01100101, 0b11101011, 0b00101000, 0b01010111, 0b11010101, 0b11000001,
  0b00101011, 0b01110001, 0b01010000, 0b11000010, 0b10100001, 0b11111010,
  0b01100100, 0b10100010, 0b01101100, 0b10110110, 0b10011001, 0b11001100,
  0b00010011, 0b01101101, 0b00100111, 0b11111101, 0b11001010, 0b11100010,
  0b10101001, 0b10111010, 0b01011111, 0b01000000, 0b01001011, 0b11100000,
  0b00011100, 0b01010101, 0b00011001, 0b11011101, 0b11010100, 0b10010100,
  0b00000001, 0b00111111, 0b11010000, 0b10000100, 0b11000100, 0b00001110,
  0b11111011, 0b00100100, 0b11101101, 0b01101111, 0b10101000, 0b10011101,
  0b00110110, 0b10001000, 0b10111110, 0b10000011, 0b10101101, 0b01010001,
  0b11101111, 0b10010110, 0b01110111, 0b11011111, 0b10011010, 0b01100110,
  0b00000011, 0b11110000, 0b01010110, 0b00111101, 0b00001001, 0b00011011,
  0b00100000, 0b11101100, 0b00100110, 0b00000000, 0b10000110, 0b10010101,
  0b01110110, 0b01001111, 0b00110100, 0b00000010, 0b11101110, 0b01110000,
  0b10110011, 0b10110001, 0b00110101, 0b01010100, 0b11011100, 0b10111000,
  0b01100001, 0b01110100, 0b10100101, 0b01000011, 0b00101001, 0b11111001,
  0b01011110, 0b00110010, 0b00110111, 0b10000000, 0b00111011, 0b00101010,
  0b11100100, 0b10000010, 0b10001111, 0b10101011, 0b11001001, 0b10111011,
  0b00111110, 0b11100110, 0b01111101, 0b01000100, 0b10010001, 0b11101010,
  0b00010010, 0b01101010, 0b01010011, 0b01010010, 0b01011011, 0b01101110,
  0b01001101, 0b11010110, 0b00111100, 0b00001000, 0b11111110, 0b00011111,
  0b00100001, 0b11010011, 0b00000110, 0b00111000, 0b01100111, 0b01111001,
  0b01111100, 0b00111010, 0b00011110, 0b11110100, 0b10100100, 0b11111000,
  0b01000010, 0b10100000, 0b11010111, 0b00010001, 0b01110101, 0b11000110,
  0b01110010, 0b00000111, 0b00001010, 0b00100011, 0b00001011, 0b11000101,
  0b01000110, 0b10111101, 0b01111010, 0b11101000, 0b01101001, 0b01001100,
  0b00010000, 0b11111100, 0b10101100, 0b10101110, 0b11101001, 0b11100001,
  0b10110100, 0b01100011, 0b00111001, 0b01111011, 0b01111111, 0b11000111,
  0b00010110, 0b00100101, 0b01011010, 0b00000101, 0b10011100, 0b10110000,
  0b10100110, 0b01111110, 0b01001110, 0b11100011, 0b00010100, 0b10100111,
  0b10001010, 0b11110101, 0b11011010, 0b00101111, 0b11001011, 0b11001111,
  0b10110101, 0b10110111, 0b01111000, 0b01101011, 0b11110111, 0b00110000,
  0b00000100, 0b01101000, 0b00011000, 0b10011111, 0b01001010, 0b10001110,
  0b10101111, 0b00010101, 0b00110011, 0b10010111, 0b10010011, 0b01100000,
  0b10000001, 0b10000111, 0b01110011, 0b01001001, 0b10001001, 0b10110010,
  0b00100010, 0b00110001, 0b11110011, 0b11001101,
];
Object.freeze(sbox4);

const sboxes = [sbox1, sbox2, sbox3, sbox4];
Object.freeze(sboxes);

///////////////////////////////////////////// Helper functions  //////////////////////////////////////////

function rol(value, shift) {
  return ((value << shift) | (value >>> (32 - shift))) >>> 0;
}
function ror(value, shift) {
  return ((value >>> shift) | (value << (32 - shift))) >>> 0;
}

function in2half(arr64) {
  return {
    left: arr64.subarray(0, 4),
    right: arr64.subarray(4, 8),
  };
}

function xor4arrays(a, b, outArray) {
  const len = Math.min(a.length, b.length);
  for (let i = 0; i < len; i++) outArray[i] = a[i] ^ b[i];
  return outArray;
}

const encoder = new TextEncoder();
const decoder = new TextDecoder();

function string2arrayPKCS7(str) {
  const blockSize = 8;
  const bytes = encoder.encode(str);
  const remainder = bytes.length % blockSize;
  const padding = remainder === 0 ? blockSize : blockSize - remainder;

  const padded = new Uint8Array(bytes.length + padding);
  padded.set(bytes);
  padded.fill(padding, bytes.length);
  return padded;
}

function removePKCS7Padding(arr) {
  const pad = arr[arr.length - 1];
  return arr.subarray(0, arr.length - pad);
}

function random(n) {
  const trash = new Uint8Array(n);
  crypto.getRandomValues(trash);
  return trash;
}

function knuth(n) {
  const x = n >>> 0;
  return (Math.imul(x, 0x9e3779b1) >>> 30) & 3;
}

function salt_add(plaintext) {
  const salt = random(8);
  return String.fromCharCode(...salt) + plaintext;
}

function salt_remove(plaintext) {
  return plaintext.subarray ? plaintext.subarray(8) : plaintext.slice(8);
}

/////////////////////////////////////////  Core Functions  ////////////////////////////////////////

const key = {
  value: [0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0x09, 0x3f],
  generate(passphrase) {
    const newkey = encryptstring(passphrase);
    let subkey = newkey.subarray(newkey.length - 8);
    subkey = feistel(subkey);
    for (let i = 0; i < 8; i++) this.value[i] = subkey[i];
  },
  update() {
    let x = 0n;
    for (let i = 0; i < 8; i++) x |= BigInt(this.value[i]) << (8n * BigInt(i));
    x ^= x >> 12n;
    x ^= (x << 25n) & 0xffffffffffffffffn;
    x ^= x >> 27n;
    x = (x * 2685821657736338717n) & 0xffffffffffffffffn;
    for (let i = 0; i < 8; i++)
      this.value[i] = Number((x >> (8n * BigInt(i))) & 0xffn);
    // return key;
  },
};

function S_box(box_in) {
  const uint32 =
    (box_in[0] | (box_in[1] << 8) | (box_in[2] << 16) | (box_in[3] << 24)) >>>
    0;
  const shuffle = knuth(uint32);

  const v0 = sboxes[0 ^ shuffle][box_in[0]] & 0xff;
  const v1 = sboxes[1 ^ shuffle][box_in[1]] & 0xff;
  const v2 = sboxes[2 ^ shuffle][box_in[2]] & 0xff;
  const v3 = sboxes[3 ^ shuffle][box_in[3]] & 0xff;

  const zwischen0 = (v0 | (v1 << 8) | (v2 << 16) | (v3 << 24)) >>> 0;
  const kombi = (zwischen0 + rol(zwischen0, 10) + ror(zwischen0, 11)) >>> 0;

  return new Uint8Array([
    (kombi & 0xff) >>> 0,
    ((kombi >>> 8) & 0xff) >>> 0,
    ((kombi >>> 16) & 0xff) >>> 0,
    ((kombi >>> 24) & 0xff) >>> 0,
  ]);
}

function feistel(data_in, decrypt = false) {
  const rounds = 10;
  key.update();

  const data = new Uint8Array(8);
  xor4arrays(data_in, key.value, data);

  const left = new Uint8Array(data.subarray(0, 4));
  const right = new Uint8Array(data.subarray(4, 8));
  const tmpLeft = new Uint8Array(4);
  const tmpRight = new Uint8Array(4);

  for (let r = 0; r < rounds; r++) {
    if (!decrypt) {
      xor4arrays(right, S_box(left), tmpRight);
      xor4arrays(left, S_box(tmpRight), tmpLeft);
    } else {
      xor4arrays(left, S_box(right), tmpLeft);
      xor4arrays(right, S_box(tmpLeft), tmpRight);
    }

    for (let i = 0; i < 4; i++) {
      const t = left[i];
      left[i] = tmpLeft[i];
      tmpLeft[i] = t;
      const t2 = right[i];
      right[i] = tmpRight[i];
      tmpRight[i] = t2;
    }
  }

  const out = new Uint8Array(8);
  out.set(left, 0);
  out.set(right, 4);
  return xor4arrays(out, key.value, out);
}

/////////////////////////////////////////  High-Level Functions  ////////////////////////////////////////

function encryptstring(str) {
  const bytes = string2arrayPKCS7(str);
  const output = new Uint8Array(bytes.length);
  const feedback = new Uint8Array(8);
  const block = new Uint8Array(8);

  for (let i = 0; i < bytes.length; i += 8) {
    const sub = bytes.subarray(i, i + 8);
    for (let j = 0; j < 8; j++) block[j] = sub[j] ^ feedback[j];

    const enc = feistel(block, false);
    for (let j = 0; j < 8; j++) {
      feedback[j] = enc[j];
      output[i + j] = enc[j];
    }
  }
  return output;
}

function decrypt2string(encBytes) {
  const decrypted = new Uint8Array(encBytes.length);
  const feedback = new Uint8Array(8);
  const block = new Uint8Array(8);

  for (let i = 0; i < encBytes.length; i += 8) {
    const sub = encBytes.subarray(i, i + 8);
    for (let j = 0; j < 8; j++) block[j] = sub[j];

    const tmp = feistel(block, true);

    for (let j = 0; j < 8; j++) {
      const val = tmp[j] ^ feedback[j];
      decrypted[i + j] = val;
      feedback[j] = block[j];
    }
  }
  const unpadded = removePKCS7Padding(decrypted);
  return decoder.decode(unpadded);
}

////////////////////////////////////////  Main Prog  ////////////////////////////////////////

const plaintext = "abcdcefgh";
const plainkey = "ABCDEFG";

console.log("Original:", plaintext);
const salted = salt_add(plaintext);
console.log("Salted:", salted);

key.generate(plainkey);
const save_key = key.value.slice();

console.log("Key ->: ", key.value);
const encrypted = encryptstring(salted);
console.log("Encrypted bytes:", encrypted);

key.value = save_key.slice();
console.log("Key <-: ", key.value);
const decrypted = decrypt2string(encrypted);
console.log("Decrypted (with salt):", decrypted);

const unsalted = salt_remove(decrypted);
console.log("Decrypted and unsalted:", unsalted);

/* Kernalgorithmus funktioniert so weit. 
  S-Boxen wurden von ChatGPT optimiert, aber da geht vielleicht noch was 
  Fehlt noch:
  - neu durchkommentieren (lassen?)
  - dit html-Dingens mit de Knöppe aka "Main Prog"
*/
