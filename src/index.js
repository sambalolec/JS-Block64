//**************************************  Global Const  **************************************//

/* S-Boxen optimiert (Maximin nonlinearity) mit erweiterten Nachbarschaftsoperationen */
/* Generated: Thu Oct 23 07:40:27 2025, elapsed 55.00s, best_obj 106.0 */
const sbox1 = [
  0b10010111, 0b10100101, 0b01011010, 0b01111100, 0b01100010, 0b01100000,
  0b10110011, 0b00011110, 0b01011100, 0b01010111, 0b01110001, 0b11001001,
  0b00110110, 0b00011010, 0b11000100, 0b01011110, 0b11111010, 0b11101010,
  0b00001000, 0b00111110, 0b10110111, 0b00111010, 0b00001010, 0b10101011,
  0b01010100, 0b11101101, 0b11010010, 0b00101101, 0b01110010, 0b10100001,
  0b01110011, 0b00100010, 0b01110100, 0b01111011, 0b01101011, 0b01110111,
  0b11000010, 0b10000100, 0b11111001, 0b11001000, 0b10111101, 0b10001110,
  0b11010111, 0b10101000, 0b11100001, 0b11001101, 0b01011101, 0b00010010,
  0b10111001, 0b00100100, 0b00100111, 0b10000001, 0b01101000, 0b01011000,
  0b11011110, 0b00011011, 0b01111110, 0b00010000, 0b10011111, 0b01001101,
  0b10001111, 0b01000011, 0b11110001, 0b00101100, 0b11001111, 0b11111111,
  0b01110101, 0b10111010, 0b10111100, 0b10001100, 0b00100000, 0b00100101,
  0b01100100, 0b01111111, 0b00111001, 0b10000101, 0b10100011, 0b10000111,
  0b10100111, 0b11011011, 0b11101111, 0b01000111, 0b00111000, 0b11011010,
  0b01101100, 0b10001101, 0b00011100, 0b00100001, 0b10101111, 0b00110001,
  0b00000100, 0b10101001, 0b11110000, 0b01000010, 0b11100111, 0b00001110,
  0b10000000, 0b01010101, 0b01010110, 0b00110111, 0b11000111, 0b11011100,
  0b10110000, 0b01010001, 0b11101110, 0b00010001, 0b01000000, 0b01010011,
  0b01110110, 0b11001010, 0b10011100, 0b01111010, 0b10010011, 0b11000110,
  0b01100111, 0b01001010, 0b10111111, 0b11010001, 0b00111101, 0b10101100,
  0b00001101, 0b10110010, 0b10101110, 0b00101111, 0b01001000, 0b00100110,
  0b10011000, 0b01111000, 0b00101011, 0b10010010, 0b01000110, 0b00010110,
  0b00010101, 0b00010011, 0b11110011, 0b10100010, 0b11100101, 0b01001100,
  0b10111000, 0b11100000, 0b10000011, 0b11110010, 0b11010000, 0b10010110,
  0b01001110, 0b01011001, 0b01001001, 0b00110000, 0b11100110, 0b00000011,
  0b10110001, 0b11111101, 0b11000000, 0b11100011, 0b11110100, 0b00111111,
  0b01011111, 0b01010000, 0b00110101, 0b11111110, 0b10010100, 0b11111000,
  0b11000011, 0b00001011, 0b11110110, 0b00011111, 0b01000101, 0b11111011,
  0b10011001, 0b00001111, 0b01110000, 0b01100101, 0b10010001, 0b01010010,
  0b11100010, 0b01001011, 0b00000000, 0b10001010, 0b10001001, 0b00011101,
  0b01101111, 0b11111100, 0b10111011, 0b11011111, 0b11010011, 0b00110011,
  0b10010101, 0b10110100, 0b11101001, 0b11100100, 0b10110101, 0b00000110,
  0b10101101, 0b11010100, 0b11110111, 0b00100011, 0b10111110, 0b00000001,
  0b11010101, 0b11101011, 0b11110101, 0b00000111, 0b10100100, 0b11011000,
  0b11011001, 0b10100110, 0b10011010, 0b00001001, 0b01000100, 0b10011110,
  0b00101010, 0b01101010, 0b01000001, 0b10010000, 0b01101110, 0b11001011,
  0b01011011, 0b00010111, 0b10001011, 0b00110010, 0b10001000, 0b00000010,
  0b00000101, 0b00101110, 0b11000101, 0b01111001, 0b01100001, 0b00101001,
  0b01101001, 0b00101000, 0b10100000, 0b11000001, 0b10000110, 0b11011101,
  0b01001111, 0b00111011, 0b01100110, 0b10000010, 0b10011011, 0b01100011,
  0b11010110, 0b11001110, 0b11101000, 0b11101100, 0b00010100, 0b00111100,
  0b00011000, 0b01111101, 0b01101101, 0b10011101, 0b00110100, 0b11001100,
  0b00001100, 0b10110110, 0b10101010, 0b00011001,
];
Object.freeze(sbox1);

const sbox2 = [
  0b11101001, 0b11110000, 0b10110100, 0b01100010, 0b00110101, 0b10111100,
  0b01110000, 0b10101111, 0b11100100, 0b10000011, 0b01010110, 0b00111010,
  0b01000000, 0b11101100, 0b10111011, 0b11110010, 0b10010110, 0b00110010,
  0b10101011, 0b10100010, 0b01101100, 0b01011100, 0b11111111, 0b01100111,
  0b11100101, 0b10100000, 0b10000001, 0b11101110, 0b00101000, 0b01110010,
  0b00111101, 0b01110111, 0b10100111, 0b11100111, 0b10011011, 0b11011110,
  0b01111010, 0b01011001, 0b01001101, 0b01010001, 0b00011110, 0b11000011,
  0b01100011, 0b01000001, 0b00000110, 0b01010010, 0b10111111, 0b01111011,
  0b01101010, 0b00001001, 0b10011010, 0b01001000, 0b10111001, 0b10110110,
  0b10111101, 0b01101111, 0b10100110, 0b01011111, 0b00100110, 0b01100110,
  0b11111101, 0b11011111, 0b10000101, 0b11001110, 0b01111000, 0b00010110,
  0b00111110, 0b00011111, 0b01010011, 0b11011010, 0b10001101, 0b11011000,
  0b10011100, 0b00010101, 0b10000010, 0b01111111, 0b11101101, 0b01110011,
  0b01111001, 0b00101110, 0b10010010, 0b10101110, 0b01101101, 0b00111011,
  0b00011010, 0b10110001, 0b00101111, 0b10110111, 0b01111110, 0b11110100,
  0b00001011, 0b01111101, 0b11000110, 0b10001100, 0b01000100, 0b01101001,
  0b11111100, 0b11110011, 0b11001010, 0b10100100, 0b01101011, 0b01101000,
  0b00011101, 0b10100101, 0b10100011, 0b00001100, 0b00000111, 0b11100001,
  0b10010000, 0b10011111, 0b01100001, 0b10001000, 0b01011010, 0b10101101,
  0b01011101, 0b11000001, 0b00101001, 0b10111110, 0b01001100, 0b01001001,
  0b10110101, 0b00010001, 0b11001011, 0b11100011, 0b11011101, 0b10111010,
  0b00001111, 0b00000011, 0b10111000, 0b00001101, 0b10001111, 0b00100001,
  0b11010011, 0b11111011, 0b11010100, 0b00100101, 0b01000010, 0b00110100,
  0b00110111, 0b00011100, 0b11011001, 0b01001111, 0b10101000, 0b00110001,
  0b11111001, 0b01100000, 0b11110110, 0b01011011, 0b01010101, 0b11000000,
  0b11100110, 0b00101100, 0b10110011, 0b10110000, 0b01010111, 0b10000000,
  0b01110001, 0b11001111, 0b10001001, 0b11010101, 0b00111000, 0b00000100,
  0b11111110, 0b00110000, 0b10010011, 0b11000010, 0b00101011, 0b01000011,
  0b11010010, 0b10000100, 0b11110111, 0b00010111, 0b10000110, 0b00100011,
  0b10011001, 0b11000101, 0b11000111, 0b00000101, 0b11011100, 0b00101010,
  0b10010111, 0b01010000, 0b10001110, 0b11111000, 0b11001100, 0b11101000,
  0b00111100, 0b11001001, 0b01110100, 0b11010001, 0b01011000, 0b11101010,
  0b00010011, 0b11100010, 0b10101001, 0b01000101, 0b00100100, 0b10001010,
  0b00001110, 0b00110011, 0b01001110, 0b01100100, 0b00010000, 0b00111111,
  0b00010010, 0b00101101, 0b11101011, 0b11100000, 0b10011110, 0b01101110,
  0b11001101, 0b00011011, 0b11101111, 0b10101100, 0b10001011, 0b00000001,
  0b01010100, 0b11110101, 0b00011000, 0b10010100, 0b01001011, 0b11000100,
  0b01111100, 0b00111001, 0b00011001, 0b10010001, 0b01011110, 0b11111010,
  0b11010110, 0b00010100, 0b01100101, 0b10011101, 0b00001000, 0b00001010,
  0b10011000, 0b11010000, 0b10000111, 0b00110110, 0b11110001, 0b10010101,
  0b11001000, 0b00100000, 0b11010111, 0b10100001, 0b01000111, 0b10110010,
  0b00100010, 0b00000000, 0b01000110, 0b10101010, 0b00000010, 0b01110101,
  0b11011011, 0b01001010, 0b00100111, 0b01110110,
];
Object.freeze(sbox2);

const sbox3 = [
  0b01010100, 0b10011001, 0b00110011, 0b01010111, 0b01011111, 0b00110111,
  0b11001110, 0b11000101, 0b10000111, 0b00001110, 0b00100111, 0b11110011,
  0b00001011, 0b10110111, 0b01011101, 0b01001001, 0b11000001, 0b10011011,
  0b01111111, 0b00001101, 0b00011001, 0b10001110, 0b01100001, 0b11000100,
  0b10001001, 0b10010101, 0b01100110, 0b01100000, 0b10111101, 0b10001100,
  0b11010101, 0b10010100, 0b01111011, 0b01000000, 0b01011000, 0b11101000,
  0b10110110, 0b00101011, 0b11011110, 0b11110010, 0b01110100, 0b10110010,
  0b11001001, 0b00100110, 0b10001000, 0b11101010, 0b11011010, 0b10101100,
  0b11110110, 0b10011010, 0b11001111, 0b11110000, 0b01011011, 0b10101101,
  0b01111000, 0b10110100, 0b01100011, 0b00100011, 0b11010000, 0b00001010,
  0b01000011, 0b10000101, 0b10011000, 0b01110101, 0b01010011, 0b10001011,
  0b00100000, 0b11100110, 0b10000010, 0b00010111, 0b01110111, 0b00111011,
  0b11110111, 0b10100111, 0b11110100, 0b10111000, 0b11010100, 0b00110100,
  0b11001011, 0b10110000, 0b01001010, 0b00110000, 0b10011111, 0b11101101,
  0b11100011, 0b11000011, 0b11111101, 0b11010001, 0b00000001, 0b01000101,
  0b00111110, 0b01101010, 0b00011011, 0b11100001, 0b00110110, 0b11000000,
  0b01101111, 0b00111100, 0b10100101, 0b00011010, 0b11110001, 0b10110101,
  0b10000011, 0b00100010, 0b10011100, 0b01110110, 0b10101001, 0b11011101,
  0b10101010, 0b10100110, 0b11111111, 0b11010111, 0b11110101, 0b01001000,
  0b10001111, 0b10000110, 0b11010010, 0b00001111, 0b11101011, 0b10111011,
  0b00101010, 0b11100100, 0b00001000, 0b10111100, 0b01110011, 0b00011111,
  0b01100101, 0b00001100, 0b01111110, 0b11111001, 0b10100100, 0b11001101,
  0b10101000, 0b01001101, 0b00011000, 0b00010110, 0b10110011, 0b11100111,
  0b00001001, 0b00100101, 0b01010010, 0b00111000, 0b01011110, 0b11100101,
  0b10111110, 0b11001100, 0b00111101, 0b11011100, 0b10111010, 0b11111100,
  0b01101001, 0b01101011, 0b00010100, 0b10001010, 0b00000100, 0b01000110,
  0b11001010, 0b10100011, 0b11101100, 0b00101000, 0b10101111, 0b10111111,
  0b10000100, 0b01101110, 0b01000100, 0b01101101, 0b10010001, 0b10100000,
  0b01010101, 0b11111000, 0b00011101, 0b10000001, 0b01110000, 0b11000111,
  0b01000001, 0b10110001, 0b00110101, 0b11101001, 0b11101111, 0b01100100,
  0b01110001, 0b00000110, 0b01101100, 0b10101110, 0b01100010, 0b01001011,
  0b01011001, 0b01011010, 0b00111111, 0b01111010, 0b01100111, 0b00101001,
  0b01101000, 0b00010001, 0b00000000, 0b11011111, 0b11100010, 0b11111110,
  0b10101011, 0b00101101, 0b11011011, 0b01010001, 0b00101111, 0b00000010,
  0b01001111, 0b11111010, 0b01000010, 0b10010011, 0b10111001, 0b10100010,
  0b01111100, 0b10010110, 0b00111001, 0b11111011, 0b01111001, 0b00101110,
  0b00110001, 0b11000010, 0b00100100, 0b00101100, 0b01111101, 0b10011110,
  0b11010011, 0b11001000, 0b00110010, 0b11010110, 0b00010101, 0b10010000,
  0b10000000, 0b11101110, 0b10010111, 0b00010010, 0b00010011, 0b01000111,
  0b01110010, 0b10011101, 0b00100001, 0b00000101, 0b00000111, 0b01010000,
  0b00010000, 0b10010010, 0b01011100, 0b00011100, 0b00111010, 0b11011001,
  0b01001110, 0b11011000, 0b10100001, 0b11000110, 0b01001100, 0b00000011,
  0b01010110, 0b10001101, 0b00011110, 0b11100000,
];
Object.freeze(sbox3);

const sbox4 = [
  0b00101110, 0b10101010, 0b00001101, 0b11001000, 0b10001011, 0b11010010,
  0b01000101, 0b11110110, 0b01000001, 0b11110010, 0b10001101, 0b00001100,
  0b10111001, 0b11000011, 0b01100010, 0b10011011, 0b00101100, 0b10001100,
  0b11011001, 0b11010001, 0b01000111, 0b11000000, 0b11011000, 0b00011010,
  0b10111111, 0b01011100, 0b00001111, 0b10010010, 0b11001110, 0b11011011,
  0b10011000, 0b01011000, 0b01001000, 0b10011110, 0b11110001, 0b00101101,
  0b00011101, 0b11100111, 0b00010111, 0b11100101, 0b10100011, 0b01011001,
  0b10010000, 0b11111111, 0b01011101, 0b10111100, 0b10000101, 0b11011110,
  0b01100101, 0b11101011, 0b00101000, 0b01010111, 0b11010101, 0b11000001,
  0b00101011, 0b01110001, 0b01010000, 0b11000010, 0b10100001, 0b11111010,
  0b01100100, 0b10100010, 0b01101100, 0b10110110, 0b10011001, 0b11001100,
  0b00010011, 0b01101101, 0b00100111, 0b11111101, 0b11001010, 0b11100010,
  0b10101001, 0b10111010, 0b01011111, 0b01000000, 0b01001011, 0b11100000,
  0b00011100, 0b01010101, 0b00011001, 0b11011101, 0b11010100, 0b10010100,
  0b00000001, 0b00111111, 0b11010000, 0b10000100, 0b11000100, 0b00001110,
  0b11111011, 0b00100100, 0b11101101, 0b01101111, 0b10101000, 0b10011101,
  0b00110110, 0b10001000, 0b10111110, 0b10000011, 0b10101101, 0b01010001,
  0b11101111, 0b10010110, 0b01110111, 0b11011111, 0b10011010, 0b01100110,
  0b00000011, 0b11110000, 0b01010110, 0b00111101, 0b00001001, 0b00011011,
  0b00100000, 0b11101100, 0b00100110, 0b00000000, 0b10000110, 0b10010101,
  0b01110110, 0b01001111, 0b00110100, 0b00000010, 0b11101110, 0b01110000,
  0b10110011, 0b10110001, 0b00110101, 0b01010100, 0b11011100, 0b10111000,
  0b01100001, 0b01110100, 0b10100101, 0b01000011, 0b00101001, 0b11111001,
  0b01011110, 0b00110010, 0b00110111, 0b10000000, 0b00111011, 0b00101010,
  0b11100100, 0b10000010, 0b10001111, 0b10101011, 0b11001001, 0b10111011,
  0b00111110, 0b11100110, 0b01111101, 0b01000100, 0b10010001, 0b11101010,
  0b00010010, 0b01101010, 0b01010011, 0b01010010, 0b01011011, 0b01101110,
  0b01001101, 0b11010110, 0b00111100, 0b00001000, 0b11111110, 0b00011111,
  0b00100001, 0b11010011, 0b00000110, 0b00111000, 0b01100111, 0b01111001,
  0b01111100, 0b00111010, 0b00011110, 0b11110100, 0b10100100, 0b11111000,
  0b01000010, 0b10100000, 0b11010111, 0b00010001, 0b01110101, 0b11000110,
  0b01110010, 0b00000111, 0b00001010, 0b00100011, 0b00001011, 0b11000101,
  0b01000110, 0b10111101, 0b01111010, 0b11101000, 0b01101001, 0b01001100,
  0b00010000, 0b11111100, 0b10101100, 0b10101110, 0b11101001, 0b11100001,
  0b10110100, 0b01100011, 0b00111001, 0b01111011, 0b01111111, 0b11000111,
  0b00010110, 0b00100101, 0b01011010, 0b00000101, 0b10011100, 0b10110000,
  0b10100110, 0b01111110, 0b01001110, 0b11100011, 0b00010100, 0b10100111,
  0b10001010, 0b11110101, 0b11011010, 0b00101111, 0b11001011, 0b11001111,
  0b10110101, 0b10110111, 0b01111000, 0b01101011, 0b11110111, 0b00110000,
  0b00000100, 0b01101000, 0b00011000, 0b10011111, 0b01001010, 0b10001110,
  0b10101111, 0b00010101, 0b00110011, 0b10010111, 0b10010011, 0b01100000,
  0b10000001, 0b10000111, 0b01110011, 0b01001001, 0b10001001, 0b10110010,
  0b00100010, 0b00110001, 0b11110011, 0b11001101,
];
Object.freeze(sbox4);

const sboxes = [sbox1, sbox2, sbox3, sbox4];
Object.freeze(sboxes);

//**************************************  Utility Functions  **************************************//

function rol32(value, shift) {
  return ((value << shift) | (value >>> (32 - shift))) >>> 0;
}
function ror32(value, shift) {
  return ((value >>> shift) | (value << (32 - shift))) >>> 0;
}

function random64() {
  const arr = new Uint32Array(2);
  crypto.getRandomValues(arr);
  let rand = 0n;
  for (const word of arr) {
    rand = (rand << 32n) + BigInt(word);
  }
  return rand;
}

function knuthHash(n) {
  const x = n >>> 0;
  return (Math.imul(x, 0x9e3779b1) >>> 30) & 3; // nur die höchsten 2 Bit als Hash
}

//**************************************  Converter Functions  **************************************//

function objectTo64BitBlocks(obj) {
  // 1. Objekt in Bytes umwandeln (JSON + UTF-8)
  const encoder = new TextEncoder();
  const bytes = encoder.encode(JSON.stringify(obj));

  // 2. Uint8Array in 64-Bit Blöcke aufteilen, padden und in BigInt umwandeln
  const blockCount = (bytes.length + 7) >> 3; // schnelles aufrunden auf nächstes Vielfaches von 8
  const blocks = new Array(blockCount);
  for (let i = 0; i < blockCount; i++) {
    let block = 0n;
    // 8 Bytes pro Block
    for (let j = 0; j < 8; j++) {
      const byte = bytes[i * 8 + j] ?? 0; // Padding mit 0, falls Block unvollständig
      block |= BigInt(byte) << BigInt(8 * j); // Bytes in BigInt verschieben
    }
    blocks[i] = block;
  }
  return blocks;
}

function blocks64BitToObj(blocks) {
  const bytes = [];

  // 1. 64-Bit Blöcke zurück in Bytes umwandeln
  for (const block of blocks) {
    // 8 Bytes pro Block (Little-Endian)
    for (let j = 0; j < 8; j++) {
      const byte = Number((block >> BigInt(8 * j)) & 0xffn);
      bytes.push(byte);
    }
  }

  // 2. Eventuelle Padding-Nullbytes entfernen
  while (bytes.length && bytes[bytes.length - 1] === 0) {
    bytes.pop();
  }

  // 3. Bytes zurück zu String
  const decoder = new TextDecoder(); // UTF-8
  return JSON.parse(decoder.decode(new Uint8Array(bytes)));
}

//**************************************  Core Functions  **************************************//

const knuthConst = 0x9e3779b97f4a7c15n;
const sqrt2 = 0x6a09e667f3bcc909n;
const sqrt3 = 0xbb67ae8584caa73bn;
const sqrt5 = 0x8b988befb3b3a0a3n;
const pi = 0x3243f6a8885a308dn;
const logNat = 0x45f306dc9c883afen;
const ln2 = 0xb17217f7d1cf79abn;

const key = {
  value: 0n,
  generate(passphrase) {
    passphrase += "0x45f306dc9c883afe"; // Wert ohne Bedeutung, nur zum Verlängern.
    let passblock = objectTo64BitBlocks(passphrase);
    this.value = sqrt2;
    let feedback = pi;

    const crypt = (block) => {
      block.forEach((b, i) => {
        block[i] = feistel(b * feedback);
        feedback = block[i];
      });
      return block;
    };
    crypt(crypt(passblock));
    this.value = passblock[passblock.length - 1];
  },
  update() {
    this.value ^= this.value >> 12n;
    this.value ^= (this.value << 25n) & 0xffffffffffffffffn;
    this.value ^= this.value >> 27n;
    this.value = (this.value * knuthConst) & 0xffffffffffffffffn;
  },
};

function S_Box(uint32) {
  const shuffle = knuthHash(uint32);
  const bytes = [
    uint32 & 0xff,
    (uint32 >>> 8) & 0xff,
    (uint32 >>> 16) & 0xff,
    (uint32 >>> 24) & 0xff,
  ];
  const [v0, v1, v2, v3] = bytes.map(
    (byte, i) => sboxes[i ^ shuffle][byte] & 0xff
  );
  const tmp = (v0 | (v1 << 8) | (v2 << 16) | (v3 << 24)) >>> 0;
  const merged = (tmp + rol32(tmp, 10) + ror32(tmp, 11)) >>> 0;
  return merged;
}

function feistel(block) {
  const rounds = 10;

  key.update();
  let data = block ^ key.value;

  let left = Number(data & 0xffffffffn) >>> 0;
  let right = Number((data >> 32n) & 0xffffffffn) >>> 0;

  for (let r = 0; r < rounds; r++) {
    const newLeft = right;
    const newRight = left ^ S_Box(right);
    left = newLeft;
    right = newRight;
  }
  let out = BigInt(right) & 0xffffffffn;
  out |= (BigInt(left) & 0xffffffffn) << 32n;
  return out ^ key.value;
}

//**************************************  High-Level Functions  **************************************//

function encrypt(data, passphrase) {
  const blocks = objectTo64BitBlocks(data);
  const IV = random64() & 0xffffffffffffffffn;
  blocks.unshift(IV);
  key.generate(passphrase);
  let feedback = sqrt5;

  for (let i = 0; i < blocks.length; i++) {
    blocks[i] ^= feedback;
    blocks[i] = feistel(blocks[i]);
    feedback = blocks[i];
  }
  return blocks;
}

function decrypt(blocks, passphrase) {
  key.generate(passphrase);
  let feedback = 0n;
  let delayed = sqrt5;

  for (let i = 0; i < blocks.length; i++) {
    delayed = blocks[i];
    blocks[i] = feistel(blocks[i]);
    blocks[i] ^= feedback;
    feedback = delayed;
  }
  blocks.shift();
  let data = blocks64BitToObj(blocks);
  return data;
}

//**************************************  UI and Interaction  **************************************//

const outputEl = document.getElementById("output");

// support function to log to both console and output element
function log(...args) {
  console.log(...args);
  outputEl.textContent += args.join(" ") + "\n";
}

userInput = {};

// Event listener for the "Run" button
document.getElementById("runBtn").addEventListener("click", () => {
  outputEl.textContent = ""; // Vor jedem Lauf resetten

  // --- Eingaben einlesen ---
  userInput.value = document.getElementById("plaintext").value;
  log("Original:", userInput.value);
  const plainkey = document.getElementById("plainkey").value;
  log("Passwort:", plainkey);

  // --- Hauptprogramm ---
  const chiffrat = encrypt(userInput, plainkey);
  log("Encrypted Blocks:", chiffrat);

  const result = decrypt(chiffrat, plainkey);
  log("Decrypted:", result.value);
});

//**************************************  To Do List  **************************************//

/* 
  Function "feistel" jetzt kein boolean mehr nötig.
  Function "S_Box" jetzt besser zu lesen.
  Funktion "random64" jetzt einen Tick flotter.
  Div kleine Änderungen wg. Lesbarkeit
  Fehlt noch:
  - 128-Bit Key
  - Blockmerge
  - neu durchkommentieren (lassen?)
*/
